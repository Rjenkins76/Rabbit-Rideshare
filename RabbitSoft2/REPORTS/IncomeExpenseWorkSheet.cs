using DevExpress.DataAccess.Excel;
using DevExpress.Spreadsheet;
using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace RabbitSoft2
{
    public partial class IncomeExpenseWorkSheet : DevExpress.XtraEditors.XtraUserControl
    {
        DataTable Uber_Eats_dt = new DataTable();
        DataTable Uber_Rides_dt = new DataTable();
        DataTable Door_Dash_dt = new DataTable();
        DataTable Expenses_dt = new DataTable();

        DateTime todaysDate = DateTime.Now;
        DateTime StartDateDate;// = todaysDate.AddDays(-14);

        int NumberTrips;
        double TotalTripsPay, AvgTripAmount;

        double ExpensesAmountBiWeek = 0;

        IWorkbook workbook;
        Worksheet worksheet;

        public IncomeExpenseWorkSheet()
        {
            InitializeComponent();

            

            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource
            sqlDataSource1.Fill();
            StartDateDate = todaysDate.AddDays(-30);

            labelControl5.Text = StartDateDate.ToShortDateString();

            
        }

        private void IncomeExpenseWorkSheet_Load(object sender, EventArgs e)
        {
            if (Uber_Eats_dt.Columns.Count < 1)
            {
                foreach (var column in sqlDataSource1.Result["Trip_Activity"].Columns)
                {
                    Uber_Eats_dt.Columns.Add(column.Name, column.Type);
                }

                foreach (var row in sqlDataSource1.Result["Trip_Activity"])
                {
                    if (row[2].ToString() == "UBER DELIVERIES")
                    {
                        DataRow dataRow = Uber_Eats_dt.NewRow();
                        for (int i = 0; i < Uber_Eats_dt.Columns.Count; i++)
                        {
                            if (row[Uber_Eats_dt.Columns[i].ColumnName] != null)
                            {
                                dataRow[i] = row[Uber_Eats_dt.Columns[i].ColumnName];
                            }
                            else
                            {
                                dataRow[i] = 0;
                            }
                        }
                        Uber_Eats_dt.Rows.Add(dataRow);
                    }
                    
                }
            }

            if (Uber_Rides_dt.Columns.Count < 1)
            {
                foreach (var column in sqlDataSource1.Result["Trip_Activity"].Columns)
                {
                    Uber_Rides_dt.Columns.Add(column.Name, column.Type);
                }

                foreach (var row in sqlDataSource1.Result["Trip_Activity"])
                {
                    if (row[2].ToString() == "UBER RIDES")
                    {
                        DataRow dataRow = Uber_Rides_dt.NewRow();
                        for (int i = 0; i < Uber_Rides_dt.Columns.Count; i++)
                        {
                            if (row[Uber_Rides_dt.Columns[i].ColumnName] != null)
                            {
                                dataRow[i] = row[Uber_Rides_dt.Columns[i].ColumnName];
                            }
                            else
                            {
                                dataRow[i] = 0;
                            }
                        }
                        Uber_Rides_dt.Rows.Add(dataRow);
                    }

                }
            }

            if (Door_Dash_dt.Columns.Count < 1)
            {
                foreach (var column in sqlDataSource1.Result["Doordash_Trip_Activity"].Columns)
                {
                    Door_Dash_dt.Columns.Add(column.Name, column.Type);
                }

                foreach (var row in sqlDataSource1.Result["Doordash_Trip_Activity"])
                {
                    DataRow dataRow = Door_Dash_dt.NewRow();
                    for (int i = 0; i < Door_Dash_dt.Columns.Count; i++)
                    {
                        if (row[Door_Dash_dt.Columns[i].ColumnName] != null)
                        {
                            dataRow[i] = row[Door_Dash_dt.Columns[i].ColumnName];
                        }
                        else
                        {
                            dataRow[i] = 0;
                        }
                    }
                    Door_Dash_dt.Rows.Add(dataRow);
                }
            }

            if (Expenses_dt.Columns.Count < 1)
            {
                foreach (var column in sqlDataSource1.Result["base_expenses"].Columns)
                {
                    Expenses_dt.Columns.Add(column.Name, column.Type);
                }

                foreach (var row in sqlDataSource1.Result["base_expenses"])
                {
                    DataRow dataRow = Expenses_dt.NewRow();
                    for (int i = 0; i < Expenses_dt.Columns.Count; i++)
                    {
                        if (row[Expenses_dt.Columns[i].ColumnName] != DBNull.Value)
                        {
                            dataRow[i] = row[Expenses_dt.Columns[i].ColumnName];
                        }
                        else
                        {
                            dataRow[i] = 0;
                        }
                    }
                    Expenses_dt.Rows.Add(dataRow);
                }
            }

            GetStartingTripAmounts();
        }

        private void GetStartingTripAmounts()
        {
            

            foreach (DataRow row in Uber_Eats_dt.Rows)
            {
                if (Convert.ToDateTime(row["DATE"]).Date >= StartDateDate.Date)
                {
                    if(row["TOTAL_COLLECTED"].ToString() != null || row["TOTAL_COLLECTED"].ToString() != 0.ToString())
                    {
                        NumberTrips++;
                        TotalTripsPay += Convert.ToDouble(row["TOTAL_COLLECTED"]);
                    }
                }
            }

            TotalTripsPay = Math.Round(TotalTripsPay, 2);
            AvgTripAmount = Math.Round(TotalTripsPay / NumberTrips, 2);

            textEdit4.Text = AvgTripAmount.ToString();
            spinEdit3.Value = 0;// NumberTrips / 14;

            

            NumberTrips = 0;
            TotalTripsPay = 0;
            AvgTripAmount = 0;
            foreach (DataRow row in Door_Dash_dt.Rows)
            {
                if (Convert.ToDateTime(row["DATE"]).Date >= StartDateDate.Date)
                {
                    NumberTrips++;
                    TotalTripsPay += Convert.ToDouble(row["TOTALPAY"]);
                }
            }

            TotalTripsPay = Math.Round(TotalTripsPay, 2);
            AvgTripAmount = Math.Round(TotalTripsPay / NumberTrips, 2);

            textEdit5.Text = AvgTripAmount.ToString();
            spinEdit4.Value = 0;// NumberTrips / 14;

            NumberTrips = 0;
            TotalTripsPay = 0;
            AvgTripAmount = 0;
            foreach (DataRow row in Uber_Rides_dt.Rows)
            {
                if (Convert.ToDateTime(row["DATE"]).Date >= StartDateDate.Date)
                {
                    if (row["TOTAL_COLLECTED"].ToString() != null || row["TOTAL_COLLECTED"].ToString() != 0.ToString())
                    {
                        NumberTrips++;
                        TotalTripsPay += Convert.ToDouble(row["TOTAL_COLLECTED"]);
                    }
                }
            }

            TotalTripsPay = Math.Round(TotalTripsPay, 2);
            AvgTripAmount = Math.Round(TotalTripsPay / NumberTrips, 2);

            textEdit2.Text = AvgTripAmount.ToString();
            worksheet.Cells["B19"].Value = AvgTripAmount;
            spinEdit1.Value = Convert.ToDecimal(worksheet.Cells["B20"].Value.ToString());


            foreach (DataRow row in Expenses_dt.Rows)
            {
                ExpensesAmountBiWeek += Convert.ToDouble(row[1]);
            }


            ExpensesAmountBiWeek = Convert.ToDouble(worksheet.Cells["B10"].Value.ToString());
            Update_Calculations(new Label(),null);

        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            ExpensesAmountBiWeek = Convert.ToDouble(textEdit1.EditValue);
            Update_Calculations(simpleButton2, null);
        }

        private void IncomeExpenseWorkSheet_ParentChanged(object sender, EventArgs e)
        {
            if (this.Parent != null)
            {
                spreadsheetControl1.LoadDocument("IncomeExpenseWorksheet.xlsx");

                workbook = spreadsheetControl1.Document;
                worksheet = workbook.Worksheets[0];
                worksheet.Cells["A19"].Value = "AVG PER TRIP:";
                

            }
            else
            {
                spreadsheetControl1.SaveDocument("IncomeExpenseWorksheet.xlsx");
            }

            
        }

        private void Update_Calculations(object sender, EventArgs e)
        {
            //if (sender.GetType() == typeof(SimpleButton)) { SimpleButton button = (SimpleButton)sender; }

            double uberRidesTripAmount = double.Parse(textEdit2.EditValue.ToString());
            int uberRidesTripsPerDay = int.Parse(spinEdit1.Value.ToString());
            double uberRidesIncomeTotal = uberRidesTripAmount * uberRidesTripsPerDay;

            double lyftRidesTripAmount = double.Parse(textEdit3.EditValue.ToString());
            int lyftRidesTripsPerDay = int.Parse(spinEdit2.Value.ToString());
            double lyftRidesIncomeTotal = lyftRidesTripAmount * lyftRidesTripsPerDay;

            double uberDeliverTripAmount = double.Parse(textEdit4.EditValue.ToString());
            int uberDeliverTripsPerDay = int.Parse(spinEdit3.Value.ToString());
            double uberDeliverIncomeTotal = uberDeliverTripAmount * uberDeliverTripsPerDay;

            double doorDashTripAmount = double.Parse(textEdit5.EditValue.ToString());
            int doorDashTripsPerDay = int.Parse(spinEdit4.Value.ToString());
            double doorDashIncomeTotal = doorDashTripAmount * doorDashTripsPerDay;

            double instacartTripAmount = double.Parse(textEdit6.EditValue.ToString());
            int instacartTripsPerDay = int.Parse(spinEdit5.Value.ToString());
            double instacartIncomeTotal = instacartTripAmount * instacartTripsPerDay;

            double TotalIncome = uberRidesIncomeTotal + lyftRidesIncomeTotal + uberDeliverIncomeTotal + doorDashIncomeTotal + instacartIncomeTotal;
            double twoWeekTotalIncome_10Days = (TotalIncome * 10);
            double twoWeekTotalIncome_11Days = (TotalIncome * 11);
            double twoWeekTotalIncome_12Days = (TotalIncome * 12);
            double twoWeekTotalIncome_13Days = (TotalIncome * 13);
            double twoWeekTotalIncome_14Days = (TotalIncome * 14);

            double profitWeek_10Days = (twoWeekTotalIncome_10Days / 2);
            double profitWeek_11Days = (twoWeekTotalIncome_11Days / 2);
            double profitWeek_12Days = (twoWeekTotalIncome_12Days / 2);
            double profitWeek_13Days = (twoWeekTotalIncome_13Days / 2);
            double profitWeek_14Days = (twoWeekTotalIncome_14Days / 2);

            double profitDay = (twoWeekTotalIncome_10Days / 10);

            lbl_AmtNeedPerDay_Profit.Text = profitDay.ToString("c");

            lbl_AmtNeedPerWeek_Profit_10Days.Text = profitWeek_10Days.ToString("C");
            lbl_AmtNeedPerWeek_Profit_11Days.Text = profitWeek_11Days.ToString("C");
            lbl_AmtNeedPerWeek_Profit_12Days.Text = profitWeek_12Days.ToString("C");
            lbl_AmtNeedPerWeek_Profit_13Days.Text = profitWeek_13Days.ToString("C");
            lbl_AmtNeedPerWeek_Profit_14Days.Text = profitWeek_14Days.ToString("C");

            lbl_TotalExpensesBiWeek.Text = ExpensesAmountBiWeek.ToString("C");
            lbl_TotalExpensesMonth.Text = (ExpensesAmountBiWeek * 2).ToString("C");

            lbl_AmtNeedPerWeek_BreakEven.Text = (ExpensesAmountBiWeek / 2).ToString("C");
            lbl_AmtNeedPerDay_BreakEven10.Text = (ExpensesAmountBiWeek / 10).ToString("C");
            lbl_AmtNeedPerDay_BreakEven11.Text = (ExpensesAmountBiWeek / 11).ToString("C");
            lbl_AmtNeedPerDay_BreakEven12.Text = (ExpensesAmountBiWeek / 12).ToString("C");
            lbl_AmtNeedPerDay_BreakEven13.Text = (ExpensesAmountBiWeek / 13).ToString("C");
            lbl_AmtNeedPerDay_BreakEven14.Text = (ExpensesAmountBiWeek / 14).ToString("C");


            double difference_10Day = (profitWeek_10Days * 2) - ExpensesAmountBiWeek;
            double difference_11Day = (profitWeek_11Days * 2) - ExpensesAmountBiWeek;
            double difference_12Day = (profitWeek_12Days * 2) - ExpensesAmountBiWeek;
            double difference_13Day = (profitWeek_13Days * 2) - ExpensesAmountBiWeek;
            double difference_14Day = (profitWeek_14Days * 2) - ExpensesAmountBiWeek;

            lblDifference_10Day.Text = difference_10Day.ToString("c");
            lblDifference_11Day.Text = difference_11Day.ToString("c");
            lblDifference_12Day.Text = difference_12Day.ToString("c");
            lblDifference_13Day.Text = difference_13Day.ToString("c");
            lblDifference_14Day.Text = difference_14Day.ToString("c");



        }

    }
}
